<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  >

		
    <!--#region Styles-->
    <Style x:Key="AnimatedButton" TargetType="Button">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="150" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
                        <ContentPresenter x:Name="presenter"
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
                    </Border>
   
                    <!--Now to handle those pesky Triggers-->
                    <!--<Style.Triggers>-->
                    <ControlTemplate.Triggers>
                        <!--// Demonstrates how to add action to a button-->
                        <!--<EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="210" From="190" Storyboard.TargetProperty="Width" Storyboard.TargetName="border" Duration="0:0:0.25"/>
                                    <DoubleAnimation To="55" From="45" Storyboard.TargetProperty="Height" Storyboard.TargetName="border" Duration="0:0:0.25"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="190" From="210" Storyboard.TargetProperty="Width" Storyboard.TargetName="border" Duration="0:0:0.25"/>
                                    <DoubleAnimation To="45" From="55" Storyboard.TargetProperty="Height" Storyboard.TargetName="border" Duration="0:0:0.25"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->
                        
                        <!--<Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="TextElement.Foreground"  Value="{StaticResource White0}"/>
                            <Setter Property="Background">
                                <Setter.Value>
                                    --><!--// Default background--><!--
                                    <LinearGradientBrush StartPoint="0.9,0" EndPoint="0, 1">
                                        <GradientStop Offset="0.35" Color="#FFCD9B00" />
                                        <GradientStop Offset="0.65" Color="#9C700A" />
                                        <GradientStop Offset="1" Color="#F94334" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    --><!--Makes gradient fill work horizontally--><!--
                                    <RadialGradientBrush Center="0.5, 1.0">
                                        <GradientStop Offset="0" Color="Beige" />
                                        <GradientStop Offset="1" Color="Green" />
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background">
                                    <Setter.Value>
                                        --><!--// Mouse over background--><!--
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <GradientStop Color="Blue" Offset="0.55" />
                                            <GradientStop Color="White" Offset="1" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Foreground">
                                    <Setter.Value>
                                        --><!--// Mouse over foreground--><!--
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <GradientStop Color="White" Offset="0.55" />
                                            <GradientStop Color="Orange" Offset="1" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource Gray3}"/>
                                <Setter Property="Foreground" Value="{StaticResource White3}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DiagonalRedButton" TargetType="Button">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="150" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
                        <ContentPresenter x:Name="presenter"
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
                    </Border>

                    <!--Now to handle those pesky Triggers - do not  work - see Multitriggers-->
                    <!--<Style.Triggers>-->
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="TextElement.Foreground"  Value="{StaticResource White0}"/>
							<Setter Property="Background" Value="{StaticResource DiagonalBackgroundLightCyan}"/>
                        </Trigger>
                       <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background">
                                    <Setter.Value>
                                        --><!--// Mouse over background--><!--
                                        <LinearGradientBrush EndPoint="0, 1" StartPoint="1, 0">
                                            <GradientStop Offset="0" Color="#FF000000" />
                                            <GradientStop Offset="0.4" Color="#FF9C700A" />
                                            <GradientStop Offset="0.9" Color="#FF9C700A" />
                                            <GradientStop Offset="1" Color="#FF000000" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Foreground">
                                    <Setter.Value>
                                        --><!--// Mouse over foreground--><!--
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <GradientStop Color="Yellow" Offset="0" />
                                            <GradientStop Color=" Orange" Offset="1" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource Black4}"/>
                                <Setter Property="Foreground" Value="{StaticResource White5}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
       <Style.Triggers>

            <!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->
            <!--//These are the items that control the diagonal Red button colors-->
           <!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->
            
           <MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="False"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource DiagonalBackgroundLightRed}"/>
					<Setter Property="TextElement.Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
                                <!--This gives a very nice graduated row of text-->
								<LinearGradientBrush StartPoint="0.0, 0.0" EndPoint="1.0, 0.0" >
									<GradientStop Color=" Yellow" Offset="1" />
									<GradientStop Color="White" Offset="0.4" />
									<GradientStop Color=" Cyan" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>
				
			<!--// moseover=true-->
	        <MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Background">
							<Setter.Value>
								<!--// Mouse over background-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="#FF000000" Offset="0.1" />
									<GradientStop Color="{StaticResource ClrWhite4}" Offset="1" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="TextElement.Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
								<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
									<GradientStop Color="{StaticResource ClrWhite0}" Offset="1" />
									<GradientStop Color="{StaticResource ClrRed6}" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>

           <!--// isEnabled = false--> 
		   <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource Black4}"/>
                        <Setter Property="Foreground" Value="{StaticResource White5}"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DiagonalCyanButton" TargetType="Button">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="150" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
                        <ContentPresenter x:Name="presenter"
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
                    </Border>

                    <!--Now to handle those pesky Triggers - do not  work - see Multitriggers-->
                    <!--<Style.Triggers>-->
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
       <Style.Triggers>

            <!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->
            <!--//These are the items that control the Cyan button colors-->
           <!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->
            
           <MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="False"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource DiagonalBackgroundLightCyan}"/>
					<Setter Property="TextElement.Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
                                <!--This gives a very nice graduated row of text-->
								<LinearGradientBrush StartPoint="0.0, 0.0" EndPoint="1.0, 0.0" >
									<GradientStop Color=" Yellow" Offset="1" />
									<GradientStop Color="White" Offset="0.4" />
									<GradientStop Color=" Cyan" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>
				
			<!--// moseover=true-->
	        <MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Background">
							<Setter.Value>
								<!--// Mouse over background-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="#FF000000" Offset="0.1" />
									<GradientStop Color="{StaticResource ClrWhite4}" Offset="1" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="TextElement.Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
								<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
									<GradientStop Color="{StaticResource ClrWhite0}" Offset="1" />
									<GradientStop Color="{StaticResource ClrRed6}" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>

           <!--// isEnabled = false--> 
		   <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource Black4}"/>
                        <Setter Property="Foreground" Value="{StaticResource White5}"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
        </Style.Triggers>
    </Style>

	<Style x:Key="DiagonalPurpleButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="14" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
						<ContentPresenter x:Name="presenter"
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>

					<!--Now to handle those pesky Triggers - do not  work - see Multitriggers-->
					<!--<Style.Triggers>-->
					<ControlTemplate.Triggers>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>

			<!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->
			<!--//These are the items that control the Cyan button colors-->
			<!--//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//-->

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="False"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="{StaticResource DiagonalBackgroundLightPurple}"/>
					<Setter Property="TextElement.Foreground">
						<Setter.Value>
							<!--// Mouse over foreground-->
							<!--This gives a very nice graduated row of text-->
							<LinearGradientBrush StartPoint="0.0, 0.0" EndPoint="1.0, 0.0" >
								<GradientStop Color=" Yellow" Offset="1" />
								<GradientStop Color="White" Offset="0.4" />
								<GradientStop Color=" Cyan" Offset="0" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</MultiTrigger.Setters>
			</MultiTrigger>

			<!--// moseover=true-->
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background">
						<Setter.Value>
							<!--// Mouse over background-->
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
								<GradientStop Color="#FF000000" Offset="0.1" />
								<GradientStop Color="{StaticResource ClrWhite4}" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="TextElement.Foreground">
						<Setter.Value>
							<!--// Mouse over foreground-->
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
								<GradientStop Color="{StaticResource ClrWhite0}" Offset="1" />
								<GradientStop Color="{StaticResource ClrRed6}" Offset="0" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</MultiTrigger.Setters>
			</MultiTrigger>

			<!--// isEnabled = false-->
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="{StaticResource Black4}"/>
					<Setter Property="Foreground" Value="{StaticResource White5}"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="DarkmodeTBlock" TargetType="TextBlock">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="false" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="Black" />
        <!--<Setter Property="BorderThickness" Value="1" />-->
        <Setter Property="FontSize" Value="14" />
        <Style.Triggers>
			<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="False"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Background">
							<Setter.Value>
								<!--// Mouse over background-->
								<LinearGradientBrush EndPoint="0.2, 0" StartPoint="0, 1">
									<GradientStop Offset="0" Color="#FF000000" />
									<GradientStop Offset="4" Color="#FF000000" />
									<GradientStop Offset="0.5" Color="{StaticResource ClrRed5}" />
									<GradientStop Offset="6" Color="#FF000000" />
									<GradientStop Offset="1" Color="#FF000000" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="White" Offset="0" />
									<GradientStop Color=" White" Offset="1" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					<Setter Property="Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="White" Offset="1" />
									<GradientStop Color=" Black" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>
				
	        <MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Background">
							<Setter.Value>
								<!--// Mouse over background-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="#FF000000" Offset="0.55" />
									<GradientStop Color="{StaticResource ClrWhite4}" Offset="1" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="Foreground">
							<Setter.Value>
								<!--// Mouse over foreground-->
								<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
									<GradientStop Color="Yellow" Offset="1" />
									<GradientStop Color=" Orange" Offset="0" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</MultiTrigger.Setters>
				</MultiTrigger>

            <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Background" Value="{StaticResource Black4}"/>
                        <Setter Property="Foreground" Value="{StaticResource White5}"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Styles-->

    <!--#region ControlTemplates-->

    <ControlTemplate x:Key="GradientButtonTemplateBlue" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						TextElement.Foreground="{TemplateBinding Foreground}"
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="Button.Tag" Value="True">
				<!--<Setter Property="Button.BorderBrush" TargetName="border" Value="{StaticResource Red0}"/>-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBrushBlue}"/>
				<!--<Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red1}"/>-->
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource Green3}"/>
				<Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red0}"/>
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Button.Background" TargetName="border" Value="#698596"/>
				<Setter Property="Button.BorderBrush" TargetName="border" Value="Black"/>
				<Setter Property="Button.Foreground" TargetName="border" Value="#555555"/>
			</Trigger>

			<!--// Defaullt settings-->
			<Trigger Property="Button.IsMouseOver" Value="false">
				<!--Handles Click event-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBrushBlue}"/>
			</Trigger>

			<!--// MouseOver settings-->
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="Button.FontWeight" Value="Bold"/>
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBorderBrushBlue}"/> 
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Button.Background" TargetName="border" Value="#698596"/>
				<Setter Property="Button.BorderBrush" TargetName="border" Value="Black"/>
				<Setter Property="Button.Foreground" TargetName="border" Value="#555555"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

    <ControlTemplate x:Key="GradientButtonTemplateGreen" TargetType="{x:Type ButtonBase}">
        <!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						TextElement.Foreground="{TemplateBinding Foreground}"
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
        <ControlTemplate.Triggers>
            <!--This handles the button being set as IsDefault=true-->
            <Trigger Property="Button.Tag" Value="True">
                <!--<Setter Property="Button.BorderBrush" TargetName="border" Value="{StaticResource Red0}"/>-->
				<Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBrushGreen}"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Black1}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <!--Handles Click event-->
                <Setter Property="Button.Background" TargetName="border" Value="{StaticResource Green3}"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red0}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <!--Handles disabled status-->
                <Setter Property="Button.Background" TargetName="border" Value="#698596"/>
                <Setter Property="Button.BorderBrush" TargetName="border" Value="Black"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="Gray"/>
            </Trigger>

            <!--// Defaullt settings-->
            <Trigger Property="Button.IsMouseOver" Value="false">
                <!--Handles Click event-->
                <Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBrushGreen}"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Black1}"/>
            </Trigger>

            <!--// MouseOver settings-->
            <Trigger Property="Button.IsMouseOver" Value="True">
                <!--MouseOver handling-->
                <Setter Property="Button.FontWeight" Value="Bold"/>
                <Setter Property="Button.Background" TargetName="border" Value="{StaticResource HeaderBorderBrushGreen}"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="{StaticResource Red3}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--Handles disabled status-->
                <Setter Property="Button.Background" TargetName="border" Value="#698596"/>
                <Setter Property="Button.BorderBrush" TargetName="border" Value="Black"/>
                <Setter Property="Button.Foreground" TargetName="border" Value="#555555"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--We would probably use this at App level to standardize all our "std" buttons as we can always overwrite it
		inside other files if required-->

	<ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
            
			<Trigger Property="Button.Tag" Value="False">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<Setter Property="Background" TargetName="border" Value="Green"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <!--MouseOver handling-->
                <Setter Property="FontWeight"  Value="Bold"/>
                <Setter Property="Foreground"  Value="White"/>
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="Green" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!--MouseOver handling-->
                <Setter Property="FontWeight"  Value="Bold"/>
                <Setter Property="Foreground"  Value="White"/>
                <Setter Property="Background" TargetName="border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
                            <GradientStop Color="red" Offset="0"/>
                            <GradientStop Color="Yellow" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>

			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="LightBlue"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--*******************************************************************-->
	<!--This is the main SQL Viewer window button styling template-->
	<!--*******************************************************************-->
	<!--This is what we are using for SQL viewer buttons-->
	<ControlTemplate x:Key="HorizontalGradientTemplateRed" TargetType="{x:Type Button}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>

		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#FFFFFFDB" Offset="0.514"/>
							<GradientStop Color="#FFFF814B" Offset="0.753"/>
							<GradientStop Color="#FFff0000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="false">
				<!--MouseOver FALSE handling-->
				<Setter Property="FontWeight"  Value="Bold"/>

				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FBFFDFDF" Offset="0"/>
							<GradientStop Color="#FBFFDFDF" Offset="0.25"/>
							<GradientStop Color="#FBFFBE3F" Offset="0.50"/>
							<!--<GradientStop Color="#FF111111" Offset="0.55"/>-->
							<GradientStop Color="#FBFFDFDF" Offset="0.75"/>
							<GradientStop Color="#FBFFDFDF" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
							<GradientStop Color="#FBFFDFDF" Offset="0.0"/>
							<GradientStop Color="#FBFFDFDF" Offset="0.1"/>
							<GradientStop Color="#FFff0000" Offset="0.95"/>
							<GradientStop Color="#FFff0000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver TRUE handling-->
				<Setter Property="FontWeight"  Value="Bold"/>

				<!--<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FFF7EFF0" Offset="0.314"/>
							<GradientStop Color="#FF111111" Offset="0.753"/>
							<GradientStop Color="#FBFFDFDF" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FFF70711" Offset="0.414"/>
							<GradientStop Color="#FFF7645D" Offset="0.853"/>
							<GradientStop Color="#FFF78683" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->

				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateRedPlainText" TargetType="{x:Type Button}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>

		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#FFF78683" Offset="0.514"/>
							<GradientStop Color="#FFF7645D" Offset="0.753"/>
							<GradientStop Color="#FFF70711" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="false">
				<!--MouseOver FALSE handling-->
				<Setter Property="FontWeight"  Value="Bold"/>

				<!--<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FFF7EFF0" Offset="0.414"/>
							<GradientStop Color="#FF8A858C" Offset="0.553"/>
							<GradientStop Color="#FF111111" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FFF78683" Offset="0.314"/>
							<GradientStop Color="#FFF7645D" Offset="0.553"/>
							<GradientStop Color="#FFF70711" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver TRUE handling-->
				<Setter Property="FontWeight"  Value="Bold"/>

                <Setter Property="Control.Foreground"  TargetName="border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                            <GradientStop Color="{StaticResource ClrRed7}" Offset="0.314"/>
                            <GradientStop Color="{StaticResource ClrWhite0}" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FFF7EFF0" Offset="0.414"/>
							<GradientStop Color="#FF8A858C" Offset="0.553"/>
							<GradientStop Color="#FF111111" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FFF70711" Offset="0.314"/>
							<GradientStop Color="#FFF7645D" Offset="0.553"/>
							<GradientStop Color="#FFF78683" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->

				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

    <Style x:Key="YellowTextGradient" TargetType="TextBlock">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Button.IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#FF684900" Offset="0.414"/>
                            <GradientStop Color="#FFC4A600" Offset="0.553"/>
                            <GradientStop Color="#FFFFFF21" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Button.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground"  >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                            <GradientStop Color="#FF684900" Offset="0.414"/>
                            <GradientStop Color="#FFC4A600" Offset="0.553"/>
                            <GradientStop Color="#FF0000" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
	<ControlTemplate x:Key="HorizontalGradientTemplateYellow" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                               
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<!--<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="#FF684900" Offset="0.514"/>
                            <GradientStop Color="#FFC3A500" Offset="0.753"/>
							<GradientStop Color="#FFF5d816" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<!--NO Mouseover-->
			<Trigger Property="Button.IsMouseOver" Value="False">
				<!--No MouseOver handling-->
				<Setter Property="FontWeight"  Value="Regular"/>
                 <Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#FF684900" Offset="1"/>
                            <GradientStop Color="#FFC4A600" Offset="0.553"/>
							<GradientStop Color="#FFFFFF21" Offset="0"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                            <GradientStop Color="#FF684900" Offset="1"/>
                            <GradientStop Color="#FFC4A600" Offset="0.553"/>
							<GradientStop Color="#F5d816" Offset="0"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<!--Mouseover-->
			<Trigger Property="Button.IsMouseOver" Value="True">
				<Setter Property="FontWeight"  Value="Bold"/>
                <Setter Property="Control.Foreground"  TargetName="border">
                    <Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                            <GradientStop Color="#FF684900" Offset="0.414"/>
                            <GradientStop Color="#FFC4A600" Offset="0.553"/>
							<GradientStop Color="#FFFFFF" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#FF684900" Offset="0.314"/>
							<GradientStop Color="#FF7d7015" Offset="0.553"/>
							<GradientStop Color="#F5d816" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateGreen" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                               
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="1"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="#FF0AEAFA" Offset="0.314"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="false">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
                <Setter Property="Control.Foreground"  TargetName="border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#FF005700" Offset="0.314"/>
                            <!--<GradientStop Color="#FF007E00" Offset="0.553"/>-->
                            <GradientStop Color="#FF00FF00" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF005E00" Offset="0.314"/>
							<GradientStop Color="{StaticResource ClrWhite0}" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="true">
				<Setter Property="FontWeight"  Value="Bold"/>
	              <Setter Property="Control.Foreground"  TargetName="border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                            <GradientStop Color="{StaticResource ClrRed7}" Offset="0.314"/>
                             <GradientStop Color="{StaticResource ClrWhite0}" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FF005E00" Offset="0.314"/>
						<GradientStop Color="#FF00FF00" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="DarkGray"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateBlue" TargetType="{x:Type Button}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" 						
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>

		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="1"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="DarkBlue" Offset="0.314"/>
							<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="false">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="DemiBold"/>
				<!--<Setter Property="Control.Foreground"  Value="{TemplateBinding Foreground}"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<!--<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.154"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>-->
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.50"/>
							<GradientStop Color="Black" Offset="0.833"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#FF1D4855" Offset="0.314"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="#FF0AEAFA" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="White" Offset="0.154"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FF1D4855" Offset="0.314"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="#FF0AEAFA" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#FF1D4855" Offset="1"/>
							<GradientStop Color="#FF007F96" Offset="0.553"/>
							<GradientStop Color="Black" Offset="0.314"/>
							<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="DarkGray"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateGray" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
					Opacity="100"
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#d1d0d6" Offset="1"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#4f4e52" Offset="0.314"/>
							<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="IsMouseOver" Value="false">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#000000" Offset="0.214"/>
							<GradientStop Color="#98979c" Offset="0.653"/>
							<GradientStop Color="#d1d0d6" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#000000" Offset="0.314"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#d1d0d6" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGradientTemplateGrayPlainText" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 
					Opacity="100"
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<!--<Setter Property="Control.Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#d1d0d6" Offset="1"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#4f4e52" Offset="0.314"/>
							-->
				<!--<GradientStop Color="#FF0AEAFA" Offset="0.314"/>-->
				<!--
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>

			<Trigger Property="IsMouseOver" Value="false">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<!--<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
							<GradientStop Color="#000000" Offset="0.214"/>
							<GradientStop Color="#98979c" Offset="0.653"/>
							<GradientStop Color="#d1d0d6" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>

			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<!--<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="#000000" Offset="0.314"/>
							<GradientStop Color="#98979c" Offset="0.553"/>
							<GradientStop Color="#d1d0d6" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ButtonGradientRed" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 					
					Opacity="100"
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
				<!--<Setter Property="Background" TargetName="border" Value="Green"/>-->
				<!--<Setter Property="Foreground" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint=".5,1">
							<GradientStop Color="White" Offset=".6" />
							<GradientStop Color="Black" Offset="1" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>-->
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#ff8080" Offset="-2"/>
							<GradientStop Color="#FFf53d4a" Offset="1"/>
							<GradientStop Color="#FFa83e45" Offset="0.429"/>
							<GradientStop Color="#FFd11608" Offset="0.412"/>
							<GradientStop Color="#FF70191f" Offset="0.552"/>
							<GradientStop Color="#ff4f2225" Offset="0.546"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#ff8080" Offset="-2"/>
							<GradientStop Color="#FFf53d4a" Offset="1"/>
							<GradientStop Color="#FFa83e45" Offset="0.429"/>
							<GradientStop Color="#FFd11608" Offset="0.412"/>
							<GradientStop Color="#FF70191f" Offset="0.552"/>
							<GradientStop Color="#ff4f2225" Offset="0.546"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#FF75DD75" Offset="0"/>
							<GradientStop Color="#FF00FF00" Offset="1"/>
							<GradientStop Color="#FF336633" Offset="0.509"/>
							<GradientStop Color="#FF445544" Offset="0.542"/>
							<GradientStop Color="#FF335555" Offset="0.542"/>
							<GradientStop Color="#ff224022" Offset="0.526"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<!--<Trigger Property="ToggleButton.IsChecked" Value="True">
			-->
			<!--Handles any checkbox style checked option-->
			<!--
			<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
			<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
		</Trigger>-->
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ButtonGradientGreen" TargetType="{x:Type ButtonBase}">
		<!-- NB - it is the Border that controls the buttons default colors
			which lets us set Back/Foreground and border colors in the button itself
			but still have mouseover etc working correctly, but still have our text "Content" display-->
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
				   BorderThickness="{TemplateBinding BorderThickness}" 
				   Background="{TemplateBinding Background}" 					
					Opacity="100"
				   CornerRadius="15"
				   SnapsToDevicePixels="True">
			<ContentPresenter x:Name="contentPresenter" 
						ContentTemplate="{TemplateBinding ContentTemplate}" 
						Content="{TemplateBinding Content}" 
						ContentStringFormat="{TemplateBinding ContentStringFormat}" 
						Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
						Margin="{TemplateBinding Padding}" 
						RecognizesAccessKey="True" 
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
		<ControlTemplate.Triggers>
			<!--This handles the button being set as IsDefault=true-->
			<Trigger Property="FrameworkElement.Tag" Value="True">
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
							<GradientStop Color="#FF75DD75" Offset="0"/>
							<GradientStop Color="#FF00FF00" Offset="1"/>
							<GradientStop Color="#FF336633" Offset="0.509"/>
							<GradientStop Color="#FF445544" Offset="0.542"/>
							<GradientStop Color="#FF335555" Offset="0.542"/>
							<GradientStop Color="#ff224022" Offset="0.526"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
			</Trigger>
			<Trigger Property="Button.IsMouseOver" Value="True">
				<!--MouseOver handling-->
				<Setter Property="FontWeight"  Value="Bold"/>
				<!--<Setter Property="Foreground"  Value="White"/>-->
				<Setter Property="Control.Foreground"  TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
							<GradientStop Color="White" Offset="0.454"/>
							<GradientStop Color="gray" Offset="0.633"/>
							<GradientStop Color="#FF000000" Offset="1"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="Background" TargetName="border">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0.2,1" EndPoint="0.5,0">
							<GradientStop Color="#FF75DD75" Offset="0"/>
							<GradientStop Color="#FF00FF00" Offset="1"/>
							<GradientStop Color="#FF336633" Offset="0.509"/>
							<GradientStop Color="#FF445544" Offset="0.542"/>
							<GradientStop Color="#FF335555" Offset="0.542"/>
							<GradientStop Color="#ff224022" Offset="0.526"/>
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<!--<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
					<GradientStop Color="#ff8080" Offset="-2"/>
					<GradientStop Color="#FFf53d4a" Offset="1"/>
					<GradientStop Color="#FFa83e45" Offset="0.429"/>
					<GradientStop Color="#FFd11608" Offset="0.412"/>
					<GradientStop Color="#FF70191f" Offset="0.552"/>
					<GradientStop Color="#ff4f2225" Offset="0.546"/>
				</LinearGradientBrush>-->
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<!--Handles Click event-->
				<Setter Property="Background"  TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="White"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<!--Handles any checkbox style checked option-->
				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<!--Handles disabled status-->
				<Setter Property="Background" TargetName="border" Value="Gray"/>
				<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

    <!--#endregion ControlTemplates-->

	
    <!--*******************************************************************-->
	<!--This is END of main SQL Viewer window button styling template-->
	<!--*******************************************************************-->

</ResourceDictionary>