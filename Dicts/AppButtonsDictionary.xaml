<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!--<Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
				
	  -->
	<!--This HIDES the focus rectangle (StrokeThickness=0)-->
	<!--  
	
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
						 Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
						 StrokeThickness="0"
						 StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

	<Style x:Key="OvalButton" TargetType="Button" >
		<!--Set to true to not get any properties from the themes.-->
		<Setter Property="OverridesDefaultStyle" Value="true" />

		<!--This does NOTHING at all !!!-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid>
						<Border x:Name="border" Background="Green" CornerRadius="15">

						</Border>
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="Yellow"/>
							<Setter Property="BorderBrush" Value="Red"/>
							<Setter Property="BorderThickness" Value="4"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--New version-->
	<Style x:Key="OvalButton2" TargetType="Button">
		<!--Set to true to not get any properties from the themes.-->
		<Setter Property="OverridesDefaultStyle" Value="false" />
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Offset="0.25" Color="Red" />
					<GradientStop Offset="0.55" Color="OrangeRed" />
					<GradientStop Offset="1" Color="Orange" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>


	<!--Produced by "Andy" at Stack Overflow - and it works
		As he says, to override inbuilt functionality, you have to
		OVERWRITE/REPLACE the properties the control normally handles,
		like mouseover, mouseDown etc.
		NB The OverridesDefaultStyle=True line lets us define default properties
		but allows the programmer to override them in his definitions if required-->

	<Style x:Key="StandardWtoGGradientButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<!--<GradientStop Color="GREEN" Offset="0.25" />-->
					<!--<GradientStop Color="{StaticResource BackgroundColor2}" Offset="0.25" />-->
					<GradientStop Offset="0" Color="#FF657C3B" />
					<GradientStop Offset="0.55" Color="#FF27A300" />
					<GradientStop Offset="1" Color="#FF99B280" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
						<ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Now to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="TextElement.Foreground"  Value="{StaticResource Black5}"/>
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0, 1">
							<GradientStop Offset="0.25" Color="#FFFFD190" />
							<GradientStop Offset="0.65" Color="#F94334" />
							<GradientStop Offset="1" Color="#9C700A" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<!--Makes gradient fill work horizontally-->
						<RadialGradientBrush Center="0.5, 1.0">
							<GradientStop Offset="0" Color="Beige" />
							<GradientStop Offset="1" Color="Green" />
						</RadialGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
								<GradientStop Color="LightGray" Offset="0.35" />
								<GradientStop Color="DarkGray" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="StandardYtoRGradientButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Offset="0.25" Color="#FFFFD190" />
					<GradientStop Offset="0.65" Color="#F94334" />
					<GradientStop Offset="1" Color="#9C700A" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	 		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">

						<!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls
							
							V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->

						<ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Now to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="0, 1">
							<GradientStop Offset="0.25" Color="#FFFFD190" />
							<GradientStop Offset="0.65" Color="#F94334" />
							<GradientStop Offset="1" Color="#9C700A" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<!--Makes gradient fill work horizontally-->
						<RadialGradientBrush Center="0.5, 1.0">
							<GradientStop Offset="0" Color="Beige" />
							<GradientStop Offset="1" Color="Green" />
						</RadialGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
								<GradientStop Color="LightGray" Offset="0.35" />
								<GradientStop Color="DarkGray" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="TextElement.Foreground" Value="{StaticResource Black5}"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ExitButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Offset="0.25" Color="DarkRed" />
					<GradientStop Offset="0.55" Color="#C67928" />
					<GradientStop Offset="1" Color="Orange" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="10">

						<!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls
							
							V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->

						<ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Now to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Offset="2" Color="DarkRed" />
							<GradientStop Offset="0.55" Color="#C67928" />
							<GradientStop Offset="0.25" Color="Orange" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="OrangeRed" />
				<Setter Property="Background" Value="White" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="RoundedButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Background" Value="Transparent"/>

		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="10">

						<!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls
							
							V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->

						<ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--No need to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Offset="2" Color="DarkRed" />
							<GradientStop Offset="0.55" Color="#C67928" />
							<GradientStop Offset="0.25" Color="Orange" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="OrangeRed" />
				<Setter Property="Background" Value="White" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Handles TextBlocks using Wingdings font family only-->
	<Style x:Key="WingDingStyle" TargetType="TextBlock">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Foreground" Value="White" />

		<Style.Triggers>
			<Trigger Property="FontFamily" Value="Wingdings">
				<Setter Property="FontSize" Value="36" />
				<Setter Property="Foreground" Value="Blue" />
				<Setter Property="Background"  Value="Transparent" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="Black" />
				<Setter Property="FontSize"  Value="48" />
				<Setter Property="FontWeight" Value="Bold" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--This works pretty well overall
		used by main button bar is in this app-->

    <Style  x:Key="RedToBlackButton" TargetType="Button"
		BasedOn="{StaticResource StandardYtoRGradientButton}"
		>
		<Setter Property="OverridesDefaultStyle" Value="true" />

		<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->

		<Setter Property="FontSize" Value="{Binding FontSize}" />
		<Setter Property="Height" Value="{Binding Height}" />
		<Setter Property="Width" Value="{Binding Width}" />
		<Setter Property="Margin" Value="2,0,0,0" />

		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0.2" EndPoint="0, 0.9">
					<GradientStop Offset="0" Color="Red" />
                    <GradientStop Offset="0.35" Color="#FFFFD190" />
                    <GradientStop Offset="0.65" Color="#FFFFD190" />
                    <GradientStop Offset="1" Color="Black" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Offset="0" Color="Red" />
							<GradientStop Offset="0.5" Color="White" />
                            <GradientStop Offset="1" Color="Black" />
                        </LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="GradientEllipse" TargetType="Ellipse">
		<Setter Property="Fill">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0.0" Color="Gray" />
					<GradientStop Offset="0.5" Color="Yellow" />
					<GradientStop Offset="1" Color="Blue" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PrintButton" TargetType="Button">
		<Setter Property="OverridesDefaultStyle" Value="false" />

		<Setter Property="Width" Value="200" />
		<Setter Property="Height" Value="80" />
		<Setter Property="OverridesDefaultStyle" Value="true" />

		<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->

		<Setter Property="FontSize" Value="{Binding FontSize}" />
		<Setter Property="Height" Value="{Binding Height}" />
		<Setter Property="Width" Value="{Binding Width}" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
					<GradientStop Offset="0.25" Color="#D87253" />
					<GradientStop Offset="0.75" Color="#FFFFD190" />
					<GradientStop Offset="1" Color="#696764" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="OrangeRed" />
				<Setter Property="Foreground" Value="White" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>